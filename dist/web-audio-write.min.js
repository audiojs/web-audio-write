(()=>{(function(){var i,f=[];function d(o){var e=this,n={},t=-1;this.parameters.forEach(function(h,l){var a=f[++t]||(f[t]=new Float32Array(e.bufferSize));a.fill(h.value),n[l]=a}),this.processor.realm.exec("self.sampleRate=sampleRate="+this.context.sampleRate+";self.currentTime=currentTime="+this.context.currentTime);var r=c(o.inputBuffer),u=c(o.outputBuffer);this.instance.process([r],[u],n)}function c(o){for(var e=[],n=0;n<o.numberOfChannels;n++)e[n]=o.getChannelData(n);return e}function s(o){return o.$$processors||(o.$$processors={})}typeof AudioWorkletNode!="function"&&(self.AudioWorkletNode=function(o,e,n){var t=s(o)[e],r=o.createScriptProcessor(void 0,2,n&&n.outputChannelCount?n.outputChannelCount[0]:2);if(r.parameters=new Map,t.properties)for(var u=0;u<t.properties.length;u++){var h=t.properties[u],l=o.createGain().gain;l.value=h.defaultValue,r.parameters.set(h.name,l)}var a=new MessageChannel;i=a.port2;var m=new t.Processor(n||{});return i=null,r.port=a.port1,r.processor=t,r.instance=m,r.onaudioprocess=d,r},Object.defineProperty((self.AudioContext||self.webkitAudioContext).prototype,"audioWorklet",{get:function(){return this.$$audioWorklet||(this.$$audioWorklet=new self.AudioWorklet(this))}}),self.AudioWorklet=function(){function o(e){this.$$context=e}return o.prototype.addModule=function(e,n){var t=this;return fetch(e).then(function(r){if(!r.ok)throw Error(r.status);return r.text()}).then(function(r){var u={sampleRate:0,currentTime:0,AudioWorkletProcessor:function(){this.port=i},registerProcessor:function(l,a){s(t.$$context)[l]={realm:h,context:u,Processor:a,properties:a.parameterDescriptors||[]}}};u.self=u;var h=new function(l,a){var m=document.createElement("iframe");m.style.cssText="position:absolute;left:0;top:-999px;width:1px;height:1px;",a.appendChild(m);var w=m.contentWindow,g=w.document,p="var window,$hook";for(var v in w)v in l||v==="eval"||(p+=",",p+=v);for(var x in l)p+=",",p+=x,p+="=self.",p+=x;var C=g.createElement("script");C.appendChild(g.createTextNode(`function $hook(self,console) {"use strict";
        `+p+";return function() {return eval(arguments[0])}}")),g.body.appendChild(C),this.exec=w.$hook(l,console)}(u,document.documentElement);return h.exec((n&&n.transpile||String)(r)),null})},o}())})();var k=URL.createObjectURL(new Blob([`
  registerProcessor('writer-worklet', class extends AudioWorkletProcessor {
    constructor() {
      super()
      this.q = []
      this.end = false
      this.cur = null
      this.port.onmessage = e => e.data === null ? this.end = true : this.q.push(e.data)
    }
    process([input], [output]) {
      let channels = output.length, remains = output[0].length
      while (remains > 0) {
        if (!this.cur) {
          if (this.cur = this.q.shift()) this.port.postMessage(this.cur[0].length)
          else {
            if (this.end) {this.port.postMessage(null);return false}
            this.port.postMessage(0)
            break
          }
        }
        if (this.cur[0].length > remains) {
          for (let c = 0; c < channels; c++) {
            output[c].set(this.cur[c].subarray(0, remains), output[c].length - remains)
            this.cur[c] = this.cur[c].subarray(remains)
          }
          remains = 0
        }
        else {
          for (let c = 0; c < channels; c++) output[c].set(this.cur[c], output[c].length - remains)
          remains -= this.cur[0].length
          this.cur = null
        }
      }
      return true
    }
  })
`],{type:"text/javascript"}));function y(i){i||(i=new AudioContext().destination);let f=i.context,d,c=f.audioWorklet.addModule(k).then(()=>{c=null,s.node=new AudioWorkletNode(f,"writer-worklet",{outputChannelCount:[i.channelCount]}),d=[],s.node.port.onmessage=e=>{d.shift()(e),e.data===null&&(s.node.closed=!0)},s.node.connect(i),s.node.write=s});function s(e){return s.then&&(s.then=null),c?c.then(()=>o(e)):o(e)}s.then=e=>{s.then=null,c.then(()=>e(s))};function o(e){if(s.node.closed)throw Error("Writer is closed");let n=e;if(e){if(e.getChannelData){n=[];for(let t=0;t<i.channelCount;t++)n[t]=t<e.numberOfChannels?e.getChannelData(t):new Float32Array}else if(typeof e[0]=="number"){n=[];let t=Math.floor(e.length/i.channelCount);for(let r=0;r<i.channelCount;r++)n[r]=e.subarray?e.subarray(r*t,r*t+t):new Float32Array(e.slice(r*t,r*t+t))}}return new Promise(t=>{d.push(t),s.node.port.postMessage(n)})}return s}})();
//# sourceMappingURL=web-audio-write.min.js.map
